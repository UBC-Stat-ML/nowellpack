package corrupt

import corrupt.post.NoisyBinaryCLMatrix

import static corrupt.CorruptStaticUtils.initializedLatentErrors 
import corrupt.post.BinaryCLMatrix
import corrupt.post.CellLocusMatrix
import corrupt.post.ConcatenationMatrix

model ConcatenationModel {

  param SamplerOptions samplerOptions ?: SamplerOptions::instance
  
  // Binary model (for copy number)
  param boolean globalParameterization ?: true
  param Double fprBound ?: 0.2
  param Double fnrBound ?: 0.2
  param BinaryCLMatrix copyNumberMarkers
  random Matrix fpr ?: initializedLatentErrors(fprBound, copyNumberMarkers.loci.size, globalParameterization)
  random Matrix fnr ?: initializedLatentErrors(fnrBound, copyNumberMarkers.loci.size, globalParameterization)
  
  // Cached inclusion probabilities (for point mutations)
  param CellLocusMatrix singleNucleotideMarkers
  
  random CorruptPhylo phylo ?: new CorruptPhylo(
    new ConcatenationMatrix(#[
      new NoisyBinaryCLMatrix(copyNumberMarkers, fpr, fnr),
      singleNucleotideMarkers
    ])
    
  )
  
  laws {
    for (int p : 0 ..< fpr.nEntries) {
      fpr.getRealVar(p) | fprBound ~ ContinuousUniform(0.0, fprBound) 
      fnr.getRealVar(p) | fnrBound ~ ContinuousUniform(0.0, fnrBound)
    }
    phylo ~ Uniform
    | phylo, fpr, fnr ~ LogPotential(phylo.logProbability)
  }

}