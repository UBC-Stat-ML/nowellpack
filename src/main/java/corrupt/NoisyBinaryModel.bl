package corrupt

import corrupt.post.NoisyBinaryCLMatrix

import static corrupt.CorruptStaticUtils.initializedLatentErrors 
import corrupt.post.BinaryCLMatrix

model NoisyBinaryModel {
  
  param SamplerOptions samplerOptions ?: SamplerOptions::instance
  param boolean globalParameterization ?: true
  param Double fprBound ?: 0.2
  param Double fnrBound ?: 0.2
  param BinaryCLMatrix binaryMatrix
  random Matrix fpr ?: initializedLatentErrors(fprBound, binaryMatrix.loci.size, globalParameterization)
  random Matrix fnr ?: initializedLatentErrors(fnrBound, binaryMatrix.loci.size, globalParameterization)
  
  random CorruptPhylo phylo ?: new CorruptPhylo(new NoisyBinaryCLMatrix(binaryMatrix, fpr, fnr))
  
  laws {
    for (int p : 0 ..< fpr.nEntries) {
      fpr.getRealVar(p) | fprBound ~ ContinuousUniform(0.0, fprBound) 
      fnr.getRealVar(p) | fnrBound ~ ContinuousUniform(0.0, fnrBound)
    }
    phylo ~ Uniform
    | phylo, fpr, fnr ~ LogPotential(phylo.logProbability)
  }

}