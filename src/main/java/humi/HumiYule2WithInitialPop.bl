package humi

model HumiExpYuleWithInitialPop {
  
  param HumiData data
  param Plated<IntVar> initialPopCounts 
  random Plated<RealVar> targetBetas, experimentBetas, initialExperimentRates
  
  laws {
    
    // Initial population related
    
    for (Index<String> experiment : data.experiments.indices) {
      initialExperimentRates.get(experiment) ~ Exponential(0.01)
    }
    
    // Late population related

    for (Index<String> experiment : data.experiments.indices) {
      experimentBetas.get(experiment) ~ Normal(0.0, pow(10, 2))
    }
    
    for (Index<String> gene : data.genes.indices.filter[!data.isControl(it)]) {
      for (Index<Integer> target : data.targets.indices(gene)) {
        targetBetas.get(target) ~ Normal(0.0, pow(10, 2))
      }
    }
    
    for (Index<String> gene : data.genes.indices) {
      for (Index<Integer> target : data.targets.indices(gene)) {
        for (Index<String> experiment : data.experiments.indices(target)) {
          data.histograms.get(target, experiment)
            | RealVar targetBeta = { if (data.isControl(gene)) fixedReal(0.0) else targetBetas.get(target) },
              RealVar experimentBeta = experimentBetas.get(experiment),
              RealVar initialExperimentRate = initialExperimentRates.get(experiment),
              IntVar initialPopCount = initialPopCounts.get(target)
            ~ CensoredExchangeableCounts(
                YuleSimon::distribution(exp(-experimentBeta-targetBeta)), 
                initialExperimentRate * initialPopCount
            )
        }
      }
    }
  }
}