package humi

model HumiWithInitialPop {
  param HumiData data
  param Plated<IntVar> initialPopCounts 
  random Plated<RealVar> targetRates, targetOverds, experimentRates, initialExperimentRates
  
  laws {
    
    // Initial population related
    
    for (Index<String> experiment : data.experiments.indices) {
      initialExperimentRates.get(experiment) ~ Exponential(0.01)
    }
    
    // Late population related

    for (Index<String> experiment : data.experiments.indices) {
      experimentRates.get(experiment) ~ Exponential(0.01)
    }
    
    for (Index<String> gene : data.genes.indices.filter[!data.isControl(it)]) {
      for (Index<Integer> target : data.targets.indices(gene)) {
        targetRates.get(target) ~ ContinuousUniform(0.5, 2.0)
      }
    }
    
    for (Index<String> gene : data.genes.indices) {
      for (Index<Integer> target : data.targets.indices(gene)) {
        for (Index<String> experiment : data.experiments.indices(target)) {
          targetOverds.get(target, experiment) ~ Exponential(0.01)
        }
      }
    }
    
    for (Index<String> gene : data.genes.indices) {
      for (Index<Integer> target : data.targets.indices(gene)) {
        for (Index<String> experiment : data.experiments.indices(target)) {
          data.histograms.get(target, experiment)
            | RealVar targetRate = { if (data.isControl(gene)) fixedReal(1.0) else targetRates.get(target) },
              RealVar targetOverd = targetOverds.get(target, experiment),
              RealVar experimentRate = experimentRates.get(experiment),
              RealVar initialExperimentRate = initialExperimentRates.get(experiment),
              IntVar initialPopCount = initialPopCounts.get(target)
            ~ CensoredExchangeableCounts(NegativeBinomialMeanParam::distribution(experimentRate * targetRate, targetOverd), initialExperimentRate * initialPopCount)
        }
      }
    }
  }
}