package humi

model CensoredExchangeableCounts {
  param IntDistribution pmf
  param RealVar poissonRate
  random CountFrequencies countFrequencies 
  
  laws {
    logf(pmf, countFrequencies) {
      HumiStaticUtils::censoringLogProductTerm(countFrequencies, pmf)
    }
    logf(pmf, countFrequencies, poissonRate) {
      if (poissonRate <= 0.0) return NEGATIVE_INFINITY
      val p0 = Math.exp(pmf.logDensity(0))
      val nObserved = countFrequencies.nDataPoints
      return Poisson::distribution((1.0 - p0)*poissonRate).logDensity(nObserved)
    }
  }
  
  generate (rand) {
    if (countFrequencies instanceof SimpleCountFrequencies) {
      countFrequencies.data.clear
      val n = Poisson::distribution(poissonRate).sample(rand)
      for (i : 0 ..< n) {
        val count = pmf.sample(rand)
        if (count > 0) {
          val oldFreq = countFrequencies.data.getOrDefault(count, 0)
          countFrequencies.data.put(count, oldFreq + 1)
        }
      }
    } else throw new RuntimeException
  }
}