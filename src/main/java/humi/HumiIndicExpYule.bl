package humi

import static humi.HumiStaticUtils.*

model HumiIndicExpYule {
  
  param HumiData data
  
  param Double maxDudControlProportion ?: 0.2
  
  
  param Plated<IntVar> initialPopCounts 
  random Plated<RealVar> targetBetas, experimentBetas, initialExperimentRates
  
  random Plated<IntVar> controlIndicators
  
  laws {
    
    // Initial population related
    
    for (Index<String> experiment : data.experiments.indices) {
      initialExperimentRates.get(experiment) ~ Exponential(0.01)
    }
    
    // Late population related

    for (Index<String> experiment : data.experiments.indices) {
      experimentBetas.get(experiment) ~ Normal(0.0, pow(10, 2))
    }
    
    for (Index<Integer> target : data.targets.indices) {
      targetBetas.get(target) ~ Normal(0.0, pow(10, 2))
    }
    
    // Target indicators
    
    controlIndicatorsList(data, controlIndicators) 
      | int minSize = ((1.0 - maxDudControlProportion) * controlIndicatorsList(data, controlIndicators).size) as int
      ~ Subset(minSize) 
    
    for (Index<String> gene : data.genes.indices) {
      for (Index<Integer> target : data.targets.indices(gene)) {
        for (Index<String> experiment : data.experiments.indices(target)) {
          data.histograms.get(target, experiment)
            | IntVar indic = { if (data.isControl(gene)) controlIndicators.get(target) else 0 },
              RealVar targetBeta = targetBetas.get(target),
              RealVar experimentBeta = experimentBetas.get(experiment),
              RealVar initialExperimentRate = initialExperimentRates.get(experiment),
              IntVar initialPopCount = initialPopCounts.get(target)
            ~ CensoredExchangeableCounts(
                YuleSimon::distribution({
                  exp(
                    - experimentBeta
                    - if (indic == 1) 0 else targetBeta
                  )
                }), 
                initialExperimentRate * initialPopCount
            )
        }
      }
    }
  }
}