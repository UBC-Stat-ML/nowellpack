package humi

model Humi {
  param HumiData data
    
  random PlatedMatrix experimentRates
  random Plated<RealVar> targetRates, targetOverds
  
  laws {

    experimentRates.getDenseSimplex(data.experiments) | int nExps = data.experiments.indices.size ~ SimplexUniform(nExps)  
    
    for (Index<String> gene : data.genes.indices) {
      for (Index<Integer> target : data.targets.indices(gene)) {
        targetRates.get(target) ~ Exponential(0.01)
        for (Index<String> experiment : data.experiments.indices(target)) {
          targetOverds.get(target, experiment) ~ Exponential(0.01)
        }
      }
    }
    
    for (Index<String> gene : data.genes.indices) {
      for (Index<Integer> target : data.targets.indices(gene)) {
        for (Index<String> experiment : data.experiments.indices(target)) {
          data.histograms.get(target, experiment)
            | RealVar targetRate = targetRates.get(target),
              RealVar targetOverd = targetOverds.get(target, experiment),
              RealVar experimentRate = experimentRates.getDenseSimplexEntry(data.experiments, experiment)
            ~ TruncatedExchangeableCounts(NegativeBinomialMeanParam::distribution(experimentRate * targetRate, targetOverd))
        }
      }
    }
  }
}