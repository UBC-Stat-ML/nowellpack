package humi.v5

import bayonet.math.NumericalUtils


model RobustPoisson {
  random IntVar realization
  param RealVar rate
  param RealVar outlierProbability
  param RealVar outlierShape
  param RealVar outlierRate
  
  laws {
    logf(realization, rate, outlierShape, outlierRate, outlierProbability) {
      if (outlierProbability < 0.0 || outlierProbability > 1.0) return NEGATIVE_INFINITY
      val regularLogPr = Poisson::distribution(rate).logDensity(realization)
      val outlierLogPr = NegativeBinomial::distribution(outlierShape, 1.0 / (1.0 + outlierRate)).logDensity(realization)
      if (regularLogPr == NEGATIVE_INFINITY || outlierLogPr == NEGATIVE_INFINITY) return NEGATIVE_INFINITY
      return NumericalUtils::logAdd(outlierLogPr, regularLogPr)
    }
  }
  
  generate(rand) {
    
  }
}