package humi

model SingleMix {
  random CountFrequencies frequencies
  random RealVar lambda ?: latentReal
  random RealVar rho1 ?: latentReal
  random RealVar rho2 ?: latentReal
  random RealVar pi ?: latentReal
  
  laws {
    pi ~ ContinuousUniform(0.0, 1.0)
    lambda ~ Exponential(0.0001) 
    rho1 ~ Exponential(0.1)
    rho2 ~ Exponential(0.1)
    frequencies | rho1, rho2, pi
      , lambda 
      ~ CensoredExchangeableCounts({
          if (pi < 0.0 || pi > 1.0) invalidParameter
          IntMixture::distribution(
            fixedSimplex(pi, 1.0 - pi), 
            #[
              YuleSimon::distribution(rho1), 
              YuleSimon::distribution(rho2)
            ]
          )
        }
      ,
      lambda
    )
  }
}