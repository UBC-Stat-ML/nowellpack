package humi

import static humi.CensoredExchangeableUtils.sampleTotalCount
import static humi.DerivedRealVar.derivedReal
import static humi.DerivedIntVar.derivedInt

model SingleMix {
  random CountFrequencies frequencies
  random RealVar lambda ?: latentReal
  random RealVar rho1 ?: latentReal
  random RealVar rho2 ?: latentReal
  random DenseSimplex pi ?: latentSimplex(2)
  
  param IntDistribution likelihood ?: IntMixture::distribution(
    pi, 
      #[
        YuleSimon::distribution(rho1), 
        YuleSimon::distribution(rho2)
      ]
    )
  
  random Random predictiveRand ?: new Random(1)
  random RealVar distinctUMIs ?: derivedReal[
    sampleTotalCount(
      predictiveRand, 
      likelihood,
      lambda,
      frequencies.nDataPoints
    ) as double
  ]
  random IntVar predictive ?: derivedInt[likelihood.sample(predictiveRand)]
  
  random RealVar distinctUMIs2 ?: derivedReal[
    val p0 = exp(likelihood.logDensity(0))
    frequencies.nDataPoints * 1.0 / (1.0 - p0)
  ] 
  
  laws {
    pi ~ SimplexUniform(2)
    lambda ~ Exponential(0.01) 
    rho1 ~ Exponential(0.1)
    rho2 ~ Exponential(0.1)
    frequencies | likelihood, pi, lambda 
      ~ CensoredExchangeableCounts(likelihood, lambda)
    | pi ~ LogPotential(if (pi.get(0) < pi.get(1)) NEGATIVE_INFINITY else 0.0)
  }
}