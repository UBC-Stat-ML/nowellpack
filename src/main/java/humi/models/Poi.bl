package humi.models
import humi.HumiData
import humi.Monitor
import java.util.function.Supplier
import humi.DistributionSummary

model Poi { 
  param HumiData data
  param Plated<IntVar> initialPopCounts
  random Plated<RealVar> means, shapes, rates
  random Plated<RealVar> lambdas
  random Plated<Monitor> visibleCloneNumbers, truncatedMeans, winsorizedMeans, conditionalWinsorizedMeans /* do not change this variable name - see HumiPostProcessor */
  param RealVar vagueRate ?: 0.01
  
  laws {
    for (Index<String> experiment : data.experiments.indices) {
      shapes.get(experiment) | vagueRate ~ Exponential(vagueRate)
      rates.get(experiment) | vagueRate ~ Exponential(vagueRate)
      for (Index<Integer> target : data.targets.indices) {
        lambdas.get(target, experiment) | RealVar shape = shapes.get(experiment), RealVar rate = rates.get(experiment) ~ Gamma(shape, rate)
      }
    }
    for (Index<Integer> target : data.targets.indices) {
      means.get(target) | vagueRate ~ Exponential(vagueRate)
      for (Index<String> experiment : data.experiments.indices(target)) {
        data.histograms.get(target, experiment) |
          RealVar lambda = lambdas.get(target, experiment), 
          IntVar initialPopCount = initialPopCounts.get(target), 
          Supplier<IntDistribution> dist = {
            val mean = means.get(target)
            val Supplier<IntDistribution> result = DistributionSummary::poi(mean)
            val lambda = lambdas.get(target, experiment)
            DistributionSummary::registerMonitors(
              visibleCloneNumbers, truncatedMeans, winsorizedMeans, conditionalWinsorizedMeans, target, experiment, result, 
              initialPopCounts, lambda
            )
            return result
          }
        ~ CensoredExchangeableCounts(dist.get, initialPopCount * lambda)   
      }   
    }
  }
}