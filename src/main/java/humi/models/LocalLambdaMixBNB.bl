package humi.models
import humi.HumiData
import humi.Monitor
import java.util.function.Supplier
import humi.DistributionSummary

model LocalLambdaMixBNB { 
  param HumiData data
  param Plated<IntVar> initialPopCounts
  random Plated<RealVar> r1s, alpha1s, beta1s, r2s, alpha2s, beta2s, pis, shapes, rates
  random Plated<Monitor> visibleCloneNumbers, truncatedMeans, truncatedSqMeans, winsorizedMeans, conditionalWinsorizedMeans /* do not change this variable name - see HumiPostProcessor */
  param RealVar vagueRate ?: 0.01
  
  laws {
    for (Index<String> experiment : data.experiments.indices) {
      shapes.get(experiment) | vagueRate ~ Exponential(vagueRate)
      rates.get(experiment) | vagueRate ~ Exponential(vagueRate)
    }
    
    for (Index<Integer> target : data.targets.indices) {
      pis.get(target) ~ ContinuousUniform(0.0, 0.5)
      r1s.get(target) | vagueRate ~ Exponential(vagueRate)
      alpha1s.get(target) | vagueRate ~ Exponential(vagueRate)
      beta1s.get(target) | vagueRate ~ Exponential(vagueRate)
      r2s.get(target) | vagueRate ~ Exponential(vagueRate)
      alpha2s.get(target) | vagueRate ~ Exponential(vagueRate)
      beta2s.get(target) | vagueRate ~ Exponential(vagueRate)
      for (Index<String> experiment : data.experiments.indices(target)) {
        data.histograms.get(target, experiment) |
          RealVar shape = shapes.get(experiment), 
          RealVar rate = rates.get(experiment), 
          IntVar initialPopCount = initialPopCounts.get(target),
          Supplier<IntDistribution> dist = {
            val pi = pis.get(target)
            val r1 = r1s.get(target)
            val alpha1 = alpha1s.get(target)
            val beta1 = beta1s.get(target)
            val r2 = r2s.get(target)
            val alpha2 = alpha2s.get(target)
            val beta2 = beta2s.get(target)
            val Supplier<IntDistribution> result = DistributionSummary::mixBnb(pi, r1, alpha1, beta1, r2, alpha2, beta2)
            DistributionSummary::registerMonitors(
              visibleCloneNumbers, truncatedMeans, truncatedSqMeans, winsorizedMeans, conditionalWinsorizedMeans, target, experiment, result, 
              initialPopCounts, shapes.get(experiment), rates.get(experiment)
            )
            return result
          }
        ~ MarginalizedGammaCensoredCounts(dist.get, shape, rate, initialPopCount)
      }   
    }
  }
}