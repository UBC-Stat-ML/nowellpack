package humi.models
import humi.HumiData
import humi.Monitor
import java.util.function.Supplier
import humi.DistributionSummary

model MixYS { 
  param HumiData data
  param Plated<IntVar> initialPopCounts
  random Plated<RealVar> rho1s, rho2s, pis, lambdas
  random Plated<Monitor> visibleCloneNumbers, truncatedMeans, truncatedSqMeans, winsorizedMeans, conditionalWinsorizedMeans /* do not change this variable name - see HumiPostProcessor */
  param RealVar vagueRate ?: 0.01
  
  laws {
    for (Index<String> experiment : data.experiments.indices) {
      lambdas.get(experiment) | vagueRate ~ Exponential(vagueRate)
    }
    for (Index<Integer> target : data.targets.indices) {
      pis.get(target) ~ ContinuousUniform(0.0, 1.0) // not using 0.5: see NB below
      rho1s.get(target) | vagueRate ~ Exponential(vagueRate)
      rho2s.get(target) ~ Exponential(1.0) // NB: if putting vague rate here, cannot find positive probab init...
      for (Index<String> experiment : data.experiments.indices(target)) {
        data.histograms.get(target, experiment) |
          RealVar lambda = lambdas.get(experiment), 
          IntVar initialPopCount = initialPopCounts.get(target),
          Supplier<IntDistribution> dist = {
            val pi = pis.get(target)
            val rho1 = rho1s.get(target)
            val rho2 = rho2s.get(target)
            val Supplier<IntDistribution> result = DistributionSummary::mixYs(pi, rho1, rho2)
            DistributionSummary::registerMonitors(
              visibleCloneNumbers, truncatedMeans, truncatedSqMeans, winsorizedMeans, conditionalWinsorizedMeans, target, experiment, result, 
              initialPopCounts, lambdas.get(experiment), null
            )
            return result
          }
        ~ CensoredExchangeableCounts(dist.get, lambda * initialPopCount)
      }   
    }
  }
}