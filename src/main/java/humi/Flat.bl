package humi

model Flat {  
  param HumiData data
  random Plated<RealVar> targetRates, experimentMeans, nUMIRates
  
  random RealVar a ?: latentReal, b ?: latentReal
    
  laws {
    
    a ~ Exponential(0.001)
    b ~ Exponential(0.001)
 
    for (Index<String> experiment : data.experiments.indices) {
      experimentMeans.get(experiment) ~ Exponential(0.1)
    }
    
    for (Index<String> gene : data.genes.indices.filter[!data.isControl(it)]) {
      for (Index<Integer> target : data.targets.indices(gene)) {
        targetRates.get(gene, target) ~ ContinuousUniform(0.1, 10.0)
      }
    }
    
    for (Index<String> gene : data.genes.indices) {
      for (Index<Integer> target : data.targets.indices(gene)) {
        nUMIRates.get(gene, target) | a, b ~ Gamma(a, b)
        for (Index<String> experiment : data.experiments.indices(gene, target)) {
          data.histograms.get(gene, target, experiment)
            | RealVar targetRate = if (data.isControl(gene)) 1.0 else targetRates.get(gene, target),  
              RealVar nUMIRate = nUMIRates.get(gene, target),
              RealVar experimentMean = experimentMeans.get(experiment)
            ~ ZeroCensoredExchangeableCounts(Poisson::distribution([experimentMean * targetRate]), nUMIRate)
        }
      }
    }
  }
}