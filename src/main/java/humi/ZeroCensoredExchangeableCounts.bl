package humi

model ZeroCensoredExchangeableCounts {
  param IntDistribution pmf
  param RealVar poissonRate
  random CountFrequencies countFrequencies 
  
  laws {
    logf(pmf, countFrequencies, poissonRate) {
      val p0 = Math.exp(pmf.logDensity(0))
      val logRenorm = Math.log1p(-p0)
      if (poissonRate <= 0.0) return NEGATIVE_INFINITY
      var result = 0.0
      var nObserved = 0
      for (count : countFrequencies.counts) {
        val frequency = countFrequencies.frequency(count)
        nObserved += frequency
        if (count == 0) throw new RuntimeException  
        if (frequency < 0) return NEGATIVE_INFINITY
        if (frequency !== 0) {
          result += frequency * (pmf.logDensity(count) - logRenorm)
        }
      }
      // product of the observations (given they are not 0) and of a thinning probability, 
      // where the probability of retaining is the pr that not equal zero
      return result + Poisson::distribution((1.0 - p0)*poissonRate).logDensity(nObserved)
    }
  }
  
  generate (rand) {
    if (countFrequencies instanceof SimpleCountFrequencies) {
      countFrequencies.data.clear
      val n = Poisson::distribution(poissonRate).sample(rand)
      for (i : 0 ..< n) {
        val count = pmf.sample(rand)
        if (count > 0) {
          val oldFreq = countFrequencies.data.getOrDefault(count, 0)
          countFrequencies.data.put(count, oldFreq + 1)
        }
      }
    } else throw new RuntimeException
  }
}