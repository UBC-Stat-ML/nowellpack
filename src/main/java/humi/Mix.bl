package humi

import static humi.HumiStaticUtils.nbMix

model Mix {
  param HumiData data
    
  param Integer nComponents ?: 3
  random Simplex simplex ?: latentSimplex(nComponents)
  random List<RealVar> 
    means  ?: latentRealList(nComponents),
    overds ?: latentRealList(nComponents)
    
  random PlatedMatrix targetRates, experimentRates
  
  laws {
    
    simplex | nComponents ~ SimplexUniform(nComponents)
    
    for (RealVar mean : means) {
      mean ~ Exponential(0.01)
    }
    
    for (RealVar overd : overds) {
      overd ~ Exponential(0.01)
    }
    
    experimentRates.getDenseSimplex(data.experiments) | int nExps = data.experiments.indices.size ~ SimplexUniform(nExps)
    targetRates.getDenseSimplex(data.targets) | int nTargets = data.targets.indices.size ~ SimplexUniform(nTargets)
    
    for (Index<Integer> target : data.targets.indices) {
            
      for (Index<String> experiment : data.experiments.indices(target)) {
        
        data.histograms.get(target, experiment)
          | means, overds, simplex,
            RealVar targetRate = targetRates.getDenseSimplexEntry(data.targets, target), 
            RealVar experimentRate = experimentRates.getDenseSimplexEntry(data.experiments, experiment)
          ~ TruncatedExchangeableCounts(IntMixture::distribution(simplex, nbMix([targetRate * experimentRate], means, overds))) 
          
      }
    }
  }
}