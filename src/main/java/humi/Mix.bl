package humi

import static humi.HumiStaticUtils.nbMix

model Mix {
  param HumiData data
    
  param Integer nComponents ?: 3
  random Simplex simplex ?: latentSimplex(nComponents)
  random List<RealVar> 
    means  ?: latentRealList(nComponents),
    overds ?: latentRealList(nComponents)
    
  random PlatedMatrix experimentRates
  
  random Plated<RealVar> targetRates, targetOverds
  
  laws {
    
    simplex | nComponents ~ SimplexUniform(nComponents)
    
    for (RealVar mean : means) {
      mean ~ Exponential(0.01)
    }
    
    for (RealVar overd : overds) {
      overd ~ Exponential(0.01)
    }
    
    experimentRates.getDenseSimplex(data.experiments) | int nExps = data.experiments.indices.size ~ SimplexUniform(nExps)
    
    
    for (Index<String> gene : data.genes.indices) {
      for (Index<Integer> target : data.targets.indices(gene)) {
        for (Index<String> experiment : data.experiments.indices(target)) {
          targetRates.get(target, experiment) ~ Exponential(0.01)
          targetOverds.get(target, experiment) ~ Exponential(0.01)
        }
      }
    }
    
    for (Index<String> gene : data.genes.indices) {
      for (Index<Integer> target : data.targets.indices(gene)) {
        for (Index<String> experiment : data.experiments.indices(target)) {
          data.histograms.get(target, experiment)
            | RealVar targetRate = targetRates.get(target, experiment),
              RealVar targetOverd = targetOverds.get(target, experiment)
              //means, overds, simplex,
              //RealVar targetRate = { if (data.isControl(gene)) fixedReal(1.0) else targetRates.get(target) }, 
              //RealVar experimentRate = experimentRates.getDenseSimplexEntry(data.experiments, experiment)
            ~ TruncatedExchangeableCounts(NegativeBinomialMeanParam::distribution(targetRate, targetOverd))
        }
      }
    }
  }
}