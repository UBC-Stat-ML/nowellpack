package chromobreak

model CB {
  
  param GlobalDataSource data
  param Integer maxCopyNumber ?: 5
  
  param Plate<String> chromosomes
  param Plate<Integer> positions
  
  random RealVar sticky ?: latentReal
  random RealVar epsilon ?: latentReal
  random List<RealVar> sds ?: latentRealList(maxCopyNumber + 1)
  
  random Plated<IntVar> copyNumbers
  random Plated<RealVar> normalizedReadCounts
  
  laws {
    sticky ~ ContinuousUniform(0.99, 1.0) 
    epsilon ~ ContinuousUniform(0.0, 0.5)
    
    for (RealVar sd : sds) {
      sd | maxCopyNumber ~ ContinuousUniform(0.1, maxCopyNumber)
    }
    
    for (Index<String> chr : chromosomes.indices) {
      for (Index<Integer> pos : positions.indices(chr)) {
        // observations
        if (normalizedReadCounts.get(pos, chr) > 0.0) {
          normalizedReadCounts.get(pos, chr) | IntVar copyNumber = copyNumbers.get(pos,chr), sds, epsilon ~ GammaMeanParam(
            if (copyNumber == 0) epsilon.doubleValue else (copyNumber.intValue as double),
            {if (copyNumber < 0 ||copyNumber >= sds.size) invalidParameter; val sd = sds.get(copyNumber); sd*sd}
          )
        }
        // initial and transition distributions
        copyNumbers.get(pos, chr) | maxCopyNumber ~ DiscreteUniform(0, maxCopyNumber + 1)
        if (pos.key != 0) {
           | IntVar cur = copyNumbers.get(pos, chr), sticky, IntVar prev = copyNumbers.get(new Index(positions, pos.key - 1), chr) ~ 
            LogPotential(if (sticky < 0 || sticky > 1) NEGATIVE_INFINITY else if (cur == prev) log(sticky) else log(1.0 - sticky))
        }
      }
    }
    
  }
}