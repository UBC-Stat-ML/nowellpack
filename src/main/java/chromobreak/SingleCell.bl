package chromobreak

import chromobreak.SingleCellHMMs
import chromobreak.SingleCellHMMs.Configs

model SingleCell {
  param SingleCellData data
  param Configs configs
  param Double vagueness ?: 10.0
    
  random RealVar switchRate ?: latentReal
  random RealVar f0 ?: latentReal
  random RealVar f1 ?: latentReal 
  random RealVar f2 ?: latentReal  
  random RealVar sd ?: latentReal 
  random RealVar sdSlope ?: latentReal 
   
  random ReadCountModel readCountModel ?: new ReadCountModel(f0, f1, f2, sd, sdSlope)
  
  // Keeping a copy to easily serialize demarginalized hmms
  random Map<String, SingleCellHMMs> hmms ?: new LinkedHashMap
    
  laws {
    
    switchRate ~ Exponential(1.0)
    
    f0 | vagueness ~ Normal(0, vagueness*vagueness) 
    f1 | vagueness ~ Normal(0, vagueness*vagueness)  
    f2 | vagueness ~ Normal(0, vagueness*vagueness)  
    
    sd ~ Exponential(0.1)
    sdSlope ~ Exponential(0.1)
    
    for (Index<String> chromosome : data.chromosomes.indices) { 
      | SingleCellHMMs hmm = {
          val current = new SingleCellHMMs(
            data, 
            chromosome, 
            readCountModel, 
            switchRate, 
            configs
          )
          hmms.put(chromosome.key, current)
          current
      } 
      ~ LogPotential(hmm.logMarginal) 
    }
  }
}