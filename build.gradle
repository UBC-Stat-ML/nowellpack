plugins {
  id 'org.xtext.xtend' version '1.0.19'
  id 'org.xtext.builder' version '1.0.19'
  id 'java'
  id 'eclipse'
}

repositories {
   flatDir {
       dirs 'libs' // Mavencentral version of itext was broken
   }
}


dependencies {
  xtextLanguages "ca.ubc.stat.blang:ca.ubc.stat.blang:3.25.2"
  compile group: 'ca.ubc.stat', name: 'conifer', version: '2.0.4'
  compile group: 'ca.ubc.stat', name: 'blangSDK', version: '1.12.0'
  compile group: 'ca.ubc.stat', name: 'bayonet', version: '4.1.0'
  compile group: 'ca.ubc.stat', name: 'conifer', version: '2.0.4'
  compile group: 'org.processing', name: 'core', version: '3.3.7'
  compile group: 'org.processing', name: 'pdf', version: '3.3.7'
  runtime name: 'itext-2.1.7' // Mavencentral version was broken
}

xtext {
  languages {
    blang {
      setup = 'ca.ubc.stat.blang.BlangDslStandaloneSetup'
      fileExtension = 'bl'
      generator.outlet.producesJava = true
      generator.javaSourceLevel = '1.8'
    }
  }
}

repositories {
  mavenCentral()
  jcenter()
  maven {
    url "https://www.stat.ubc.ca/~bouchard/maven/"
  }
  maven {
    url "http://www.biojava.org/download/maven/"
  }
}

xtend {
  generator {
    javaSourceLevel = 1.8
  }
}

apply plugin:'application'

configurations.archives.with {
    artifacts.remove artifacts.find { it.archiveTask.is distZip }
    artifacts.remove artifacts.find { it.archiveTask.is distTar }
}  


def createScript(project, mainClass, name) {
  project.tasks.create(name: name, type: CreateStartScripts) {
    outputDir       = new File(project.buildDir, 'scripts')
    mainClassName   = mainClass
    applicationName = name
    classpath       = project.tasks[JavaPlugin.JAR_TASK_NAME].outputs.files + project.configurations.runtime
  }
  project.tasks[name].dependsOn(project.jar)

  project.applicationDistribution.with {
    into("bin") {
      from(project.tasks[name])
      fileMode = 0755
    }
  }
}

// The next two lines disable the tasks for the primary main which by default
// generates a script with a name matching the project name. 
// You can leave them enabled but if so you'll need to define mainClassName
// And you'll be creating your application scripts two different ways which 
// could lead to confusion
startScripts.enabled = false
run.enabled = false

// Call this for each Main class you want to expose with an app script
createScript(project, 'corrupt.Synthetic',              'corrupt-synthetic')
createScript(project, 'corrupt.CachedLikelihood',       'corrupt-infer')
createScript(project, 'corrupt.post.AverageCLMatrices', 'corrupt-average')

